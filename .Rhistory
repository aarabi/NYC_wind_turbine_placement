#optimization problems
f= function(x){ return(x*(10-x))}
optimize(f,interval=c(0,10),maximum=TRUE)
?optimize
install.packages("scipy")
from scipy import special
library(gdata)
data<-read.csv(file="WIND_VXE_2013.csv", header=TRUE)
new.names<-c("date_time","T1_Possible_Power","T2_Possible_Power","T3_Possible_Power",
"T4_Possible_Power","T5_Possible_Power","T6_Possible_Power","T7_Possible_Power",
"T1_Total_Active_Power","T2_Total_Active_Power","T3_Total_Active_Power","T4_Total_Active_Power",
"T5_Total_Active_Power","T6_Total_Active_Power","T7_Total_Active_Power","mean_wind_mps", "min_wind_mps",
"max_wind_mps", "cum_energy_delivered_kwh")
cbind(names(data), new.names)
names(data) <- new.names
#subset data
cumulative <- subset(data, select=c(1,19))
possible <- subset(data, select=1:8)
active<- subset(data, select=c(1,9:15))
wind<-subset(data, select=c(1,16:18))
dat<-data
dim(dat) #dimesnsions of the data
str(dat) #structure of data
summary(dat) # statistical summary
#check for any missing data
check<-function(df)
{
# count NA (missing values)
NAs<-sum(is.na(df))
# example: is.na(c(1, NA))        #> FALSE  TRUE
print(paste("Missing Values:", NAs))
# count incomplete records (rows containing missing values)
ok<-complete.cases(df)
print(head(ok, n=10))
print(paste("Incomplete Records:", sum(! ok)))
# Show incomplete records (if less than 100 NAs).
if(NAs > 0 & NAs <= 100) print( df[which(! complete.cases(df)), ] )
# If more than 100, show column-wise distribution of NAs.
if (NAs > 100) hist(which(is.na(df), arr.ind=TRUE)[,2], xlab="Column", freq=TRUE, breaks=1:dim(df)[2], main="Column-wise distribution of missing values")
}
removed<-function(nrow, nrow1){
print(paste("number of records REMOVED:", nrow-nrow1, sep=" "))
print(paste("number of records REMAINING:", nrow1, sep=" "))
}
check(dat)
library(gdata)
data<-read.csv(file="WIND_VXE_2013.csv", header=TRUE)
new.names<-c("date_time","T1_Possible_Power","T2_Possible_Power","T3_Possible_Power",
"T4_Possible_Power","T5_Possible_Power","T6_Possible_Power","T7_Possible_Power",
"T1_Total_Active_Power","T2_Total_Active_Power","T3_Total_Active_Power","T4_Total_Active_Power",
"T5_Total_Active_Power","T6_Total_Active_Power","T7_Total_Active_Power","mean_wind_mps", "min_wind_mps",
"max_wind_mps", "cum_energy_delivered_kwh")
cbind(names(data), new.names)
names(data) <- new.names
#subset data
cumulative <- subset(data, select=c(1,19))
possible <- subset(data, select=1:8)
active<- subset(data, select=c(1,9:15))
wind<-subset(data, select=c(1,16:18))
dat<-data
dim(dat) #dimesnsions of the data
str(dat) #structure of data
summary(dat) # statistical summary
#check for any missing data
check<-function(df)
{
# count NA (missing values)
NAs<-sum(is.na(df))
# example: is.na(c(1, NA))        #> FALSE  TRUE
print(paste("Missing Values:", NAs))
# count incomplete records (rows containing missing values)
ok<-complete.cases(df)
print(head(ok, n=10))
print(paste("Incomplete Records:", sum(! ok)))
# Show incomplete records (if less than 100 NAs).
if(NAs > 0 & NAs <= 100) print( df[which(! complete.cases(df)), ] )
# If more than 100, show column-wise distribution of NAs.
if (NAs > 100) hist(which(is.na(df), arr.ind=TRUE)[,2], xlab="Column", freq=TRUE, breaks=1:dim(df)[2], main="Column-wise distribution of missing values")
}
library(gdata)
data<-read.csv(file="WIND_VXE_2013.csv", header=TRUE)
new.names<-c("date_time","T1_Possible_Power","T2_Possible_Power","T3_Possible_Power",
"T4_Possible_Power","T5_Possible_Power","T6_Possible_Power","T7_Possible_Power",
"T1_Total_Active_Power","T2_Total_Active_Power","T3_Total_Active_Power","T4_Total_Active_Power",
"T5_Total_Active_Power","T6_Total_Active_Power","T7_Total_Active_Power","mean_wind_mps", "min_wind_mps",
"max_wind_mps", "cum_energy_delivered_kwh")
cbind(names(data), new.names)
names(data) <- new.names
#subset data
cumulative <- subset(data, select=c(1,19))
possible <- subset(data, select=1:8)
active<- subset(data, select=c(1,9:15))
wind<-subset(data, select=c(1,16:18))
dat<-data
dim(dat) #dimesnsions of the data
str(dat) #structure of data
summary(dat) # statistical summary
#check for any missing data
check<-function(df)
{
# count NA (missing values)
NAs<-sum(is.na(df))
# example: is.na(c(1, NA))        #> FALSE  TRUE
print(paste("Missing Values:", NAs))
# count incomplete records (rows containing missing values)
ok<-complete.cases(df)
print(head(ok, n=10))
print(paste("Incomplete Records:", sum(! ok)))
# Show incomplete records (if less than 100 NAs).
if(NAs > 0 & NAs <= 100) print( df[which(! complete.cases(df)), ] )
# If more than 100, show column-wise distribution of NAs.
if (NAs > 100) hist(which(is.na(df), arr.ind=TRUE)[,2], xlab="Column", freq=TRUE, breaks=1:dim(df)[2], main="Column-wise distribution of missing values")
}
removed<-function(nrow, nrow1){
print(paste("number of records REMOVED:", nrow-nrow1, sep=" "))
print(paste("number of records REMAINING:", nrow1, sep=" "))
}
check(dat)
library(gdata)
data<-read.csv(file="WIND_VXE_2013.csv", header=TRUE)
new.names<-c("date_time","T1_Possible_Power","T2_Possible_Power","T3_Possible_Power",
"T4_Possible_Power","T5_Possible_Power","T6_Possible_Power","T7_Possible_Power",
"T1_Total_Active_Power","T2_Total_Active_Power","T3_Total_Active_Power","T4_Total_Active_Power",
"T5_Total_Active_Power","T6_Total_Active_Power","T7_Total_Active_Power","mean_wind_mps", "min_wind_mps",
"max_wind_mps", "cum_energy_delivered_kwh")
cbind(names(data), new.names)
names(data) <- new.names
#subset data
cumulative <- subset(data, select=c(1,19))
possible <- subset(data, select=1:8)
active<- subset(data, select=c(1,9:15))
wind<-subset(data, select=c(1,16:18))
dat<-data
dim(dat) #dimesnsions of the data
str(dat) #structure of data
summary(dat) # statistical summary
#check for any missing data
check<-function(df)
{
# count NA (missing values)
NAs<-sum(is.na(df))
# example: is.na(c(1, NA))        #> FALSE  TRUE
print(paste("Missing Values:", NAs))
# count incomplete records (rows containing missing values)
ok<-complete.cases(df)
print(head(ok, n=10))
print(paste("Incomplete Records:", sum(! ok)))
# Show incomplete records (if less than 100 NAs).
if(NAs > 0 & NAs <= 100) print( df[which(! complete.cases(df)), ] )
# If more than 100, show column-wise distribution of NAs.
if (NAs > 100) hist(which(is.na(df), arr.ind=TRUE)[,2], xlab="Column", freq=TRUE, breaks=1:dim(df)[2], main="Column-wise distribution of missing values")
}
removed<-function(nrow, nrow1){
print(paste("number of records REMOVED:", nrow-nrow1, sep=" "))
print(paste("number of records REMAINING:", nrow1, sep=" "))
}
check(dat)  # NAs present. Column-wise distribution is relatively uniform (besides wind with relatively few)
library(gdata)
data<-read.csv(file="WIND_VXE_2013.csv", header=TRUE)
new.names<-c("date_time","T1_Possible_Power","T2_Possible_Power","T3_Possible_Power",
"T4_Possible_Power","T5_Possible_Power","T6_Possible_Power","T7_Possible_Power",
"T1_Total_Active_Power","T2_Total_Active_Power","T3_Total_Active_Power","T4_Total_Active_Power",
"T5_Total_Active_Power","T6_Total_Active_Power","T7_Total_Active_Power","mean_wind_mps", "min_wind_mps",
"max_wind_mps", "cum_energy_delivered_kwh")
cbind(names(data), new.names)
names(data) <- new.names
#subset data
cumulative <- subset(data, select=c(1,19))
possible <- subset(data, select=1:8)
active<- subset(data, select=c(1,9:15))
wind<-subset(data, select=c(1,16:18))
dat<-data
dim(dat) #dimesnsions of the data
str(dat) #structure of data
summary(dat) # statistical summary
#check for any missing data
check<-function(df){
# count NA (missing values)
NAs<-sum(is.na(df))
print(paste("Missing Values:", NAs))
# count incomplete records (rows containing missing values)
ok<-complete.cases(df)
print(paste("Incomplete Records:", sum(! ok)))
# Show incomplete records (if less than 100 NAs).
if(NAs > 0 & NAs <= 100) print( df[which(! complete.cases(df)), ] )
# If more than 100, show column-wise distribution of NAs.
if (NAs > 100) hist(which(is.na(df), arr.ind=TRUE)[,2], xlab="Column", freq=TRUE, breaks=1:dim(df)[2], main="Column-wise distribution of missing values")
}
removed<-function(nrow, nrow1){
print(paste("number of records REMOVED:", nrow-nrow1, sep=" "))
print(paste("number of records REMAINING:", nrow1, sep=" "))
}
check(dat)  # NAs present. Column-wise distribution is relatively uniform (besides wind with relatively few)
library(gdata)
library(lpSolveAPI)
setwd("R:/projects/1 weekend thing")
power_per_site<-read.csv("sites.wind.power.per.csv", header=TRUE)
wind_sites<-read.csv("wind.sites.csv", header=TRUE)
demand<-read.csv("demand.csv", header=TRUE)
gen<-read.csv("gen.info.csv", header=TRUE)
import<-read.csv("import.limits.csv", header=TRUE)
trans<-read.csv("trans.limits.csv", header=TRUE)
west_energy <- gen$ann.gen.coal.gwh[1] + gen$ann.gen.nuc.gwh[1] + gen$ann.gen.hydro.gwh[1]
west_power <- (gen$ann.gen.coal.gwh[1] + gen$ann.gen.nuc.gwh[1] + gen$ann.gen.hydro.gwh[1])*1000/8760
east_energy <- gen$ann.gen.coal.gwh[2] + gen$ann.gen.nuc.gwh[2] + gen$ann.gen.hydro.gwh[2]
east_power <- (gen$ann.gen.coal.gwh[2] + gen$ann.gen.nuc.gwh[2] + gen$ann.gen.hydro.gwh[2])*1000/8760
downstate_energy <- gen$ann.gen.coal.gwh[3] + gen$ann.gen.nuc.gwh[3] + gen$ann.gen.hydro.gwh[3]
downstate_power <- (gen$ann.gen.coal.gwh[3] + gen$ann.gen.nuc.gwh[3] + gen$ann.gen.hydro.gwh[3])*1000/8760
state_energy <- west_energy + east_energy + downstate_energy
state_power <- west_power + east_power + downstate_power
west_cap <- gen$cap.gen.nonbase.mw[1] + import$ieso.mw[1] + import$hq.mw[1] + import$pjm.mw[1] + import$ne.mw[1]
east_cap <- gen$cap.gen.nonbase.mw[2] + import$ieso.mw[2] + import$hq.mw[2] + import$pjm.mw[2] + import$ne.mw[2]
down_cap <- gen$cap.gen.nonbase.mw[3] + import$ieso.mw[3] + import$hq.mw[3] + import$pjm.mw[3] + import$ne.mw[3]
demand$state <- demand$west + demand$east + demand$downstate
state_cap <- west_cap + east_cap + down_cap
#case 3
sites.west <- wind_sites$site[which(wind_sites$region=="west")]
sites.east <- wind_sites$site[which(wind_sites$region=="east")]
sites.downstate <- wind_sites$site[which(wind_sites$region=="downstate")]
sites <- wind_sites$site
n.sites.west <- length(sites.west)
n.sites.east <- length(sites.east)
n.sites.downstate <- length(sites.downstate)
#now we have the 5 variables and the 3 regions
n.var <- 66 + 5*8760
n.con<- 1+ 3*8760
n.bo <- 66 + 8760
n.sites<-66
n.hrs<-8760
trans.limit.east <- trans$trans.limit.mw[1]
trans.limit.downstate <- trans$trans.limit.mw[2]
turbine.capacities <- c(3, 3000, 6000, 9000, 12000, 15000)
View(wind_sites)
#case 3
sites.west <- wind_sites$site[which(wind_sites$region=="west")]
sites.east <- wind_sites$site[which(wind_sites$region=="east")]
sites.downstate <- wind_sites$site[which(wind_sites$region=="downstate")]
sites <- wind_sites$site
n.sites.west <- length(sites.west)
n.sites.east <- length(sites.east)
n.sites.downstate <- length(sites.downstate)
#now we have the 5 variables and the 3 regions
n.var <- 66 + 5*8760
n.con<- 1+ 3*8760
n.bo <- 66 + 8760
n.sites<-66
n.hrs<-8760
trans.limit.east <- trans$trans.limit.mw[1]
trans.limit.downstate <- trans$trans.limit.mw[2]
turbine.capacities <- c(3, 3000, 6000, 9000, 12000, 15000)
for (j in 1:length(turbine.capacities)){
wind.cap.total.mw3 <- turbine.capacities[j]
rate.cap.per.mw <- 3
n.t <- wind.cap.total.mw3/rate.cap.per.mw
#develop MILP:
lp.case3 <- make.lp(nrow = n.con, ncol = n.var)
lp.control(lp.case3, sense = 'min')
#set coefficients
set.objfn(lp.case3,obj=c(rep(0,n.sites), rep(1,3*n.hrs),rep(0,2*n.hrs)))
#force number of turbines at each site to be an integer
set.type(lp.case3, c(1:n.sites),type = "integer")
#add constraints by row (rather than by column)
#turn on row entry mode - turn off after adding all constraints
row.add.mode(lp.case3, "on")
add.constraint(lp.case3, xt= rep(1,n.sites), type="=", rhs=n.t, indices=c(1:n.sites))
#energy balance: West
for(i in 1:n.hrs){
add.constraint(lp.case3,xt=c(power_per_site[i,1+sites.west],1,(-1)),type=">=", rhs=demand[i, "west"] - west_power, indices=c(sites.west,(n.sites+i),(n.sites+3*n.hrs+i)))
}
#west.capgen.mw = nonbase
#energy balance: East
for(i in 1:n.hrs){
add.constraint(lp.case3,xt=c(power_per_site[i,1+sites.east],1,1,(-1)),type=">=", rhs=demand[i,"east"] - east_power, indices=c(sites.east,(n.sites+n.hrs+i),(n.sites+3*n.hrs+i),(n.sites+4*n.hrs+i)))
}
#energy balance: Downstate
for(i in 1:n.hrs){
add.constraint(lp.case3,xt=c(power_per_site[i,1+sites.downstate],1,1),type=">=", rhs=demand[i, "downstate"] - downstate_power, indices=c(sites.downstate,(n.sites+2*n.hrs+i),(n.sites+4*n.hrs+i)))
}
#remember to turn off row entry mode
row.add.mode(lp.case3, "off")
#set bounds on decision variables
set.bounds(lp.case3, lower=rep(0,n.var), upper= c(wind_sites$n.t.max,rep(west_cap,n.hrs),rep(east_cap,n.hrs),rep(down_cap,n.hrs),rep(trans.limit.east,n.hrs),rep(trans.limit.downstate,n.hrs)))
#solves optimization problem:
solve(lp.case3)
turbine.distribution3 <- get.variables(lp.case3)[1:n.sites]
other.gen.total.mwh3 <- sum(get.variables(lp.case3)[67:26346])
#now input for below
cap.factor.wind3 <- (sum(demand$state) - other.gen.total.mwh3 -state_power*n.hrs)/(wind.cap.total.mw3*8760)
assign(sprintf("turbine.distribution.case3.%s",wind.cap.total.mw3),turbine.distribution3)
assign(sprintf("other.gen.total.mwh.case3.%s",wind.cap.total.mw3),other.gen.total.mwh3)
assign(sprintf("cap.factor.wind.case3.%s",wind.cap.total.mw3),cap.factor.wind3)
}
cap.factor.wind3
turbine.distribution3[j] <- get.variables(lp.case3)[1:n.sites]
turbine.distribution3<-matrix(list(), nrow=6, ncol=66)
turbine.distribution3[j,] <- get.variables(lp.case3)[1:n.sites]
other.gen.total.mwh3<-matrix(list(),nrow=6)
other.gen.total.mwh3[j] <- sum(get.variables(lp.case3)[67:26346])
cap.factor.wind3<-matrix(list(),nrow=6)
library(gdata)
library(lpSolveAPI)
setwd("R:/projects/1 weekend thing")
power_per_site<-read.csv("sites.wind.power.per.csv", header=TRUE)
wind_sites<-read.csv("wind.sites.csv", header=TRUE)
demand<-read.csv("demand.csv", header=TRUE)
gen<-read.csv("gen.info.csv", header=TRUE)
import<-read.csv("import.limits.csv", header=TRUE)
trans<-read.csv("trans.limits.csv", header=TRUE)
west_energy <- gen$ann.gen.coal.gwh[1] + gen$ann.gen.nuc.gwh[1] + gen$ann.gen.hydro.gwh[1]
west_power <- (gen$ann.gen.coal.gwh[1] + gen$ann.gen.nuc.gwh[1] + gen$ann.gen.hydro.gwh[1])*1000/8760
east_energy <- gen$ann.gen.coal.gwh[2] + gen$ann.gen.nuc.gwh[2] + gen$ann.gen.hydro.gwh[2]
east_power <- (gen$ann.gen.coal.gwh[2] + gen$ann.gen.nuc.gwh[2] + gen$ann.gen.hydro.gwh[2])*1000/8760
downstate_energy <- gen$ann.gen.coal.gwh[3] + gen$ann.gen.nuc.gwh[3] + gen$ann.gen.hydro.gwh[3]
downstate_power <- (gen$ann.gen.coal.gwh[3] + gen$ann.gen.nuc.gwh[3] + gen$ann.gen.hydro.gwh[3])*1000/8760
state_energy <- west_energy + east_energy + downstate_energy
state_power <- west_power + east_power + downstate_power
west_cap <- gen$cap.gen.nonbase.mw[1] + import$ieso.mw[1] + import$hq.mw[1] + import$pjm.mw[1] + import$ne.mw[1]
east_cap <- gen$cap.gen.nonbase.mw[2] + import$ieso.mw[2] + import$hq.mw[2] + import$pjm.mw[2] + import$ne.mw[2]
down_cap <- gen$cap.gen.nonbase.mw[3] + import$ieso.mw[3] + import$hq.mw[3] + import$pjm.mw[3] + import$ne.mw[3]
demand$state <- demand$west + demand$east + demand$downstate
state_cap <- west_cap + east_cap + down_cap
#case 3
sites.west <- wind_sites$site[which(wind_sites$region=="west")]
sites.east <- wind_sites$site[which(wind_sites$region=="east")]
sites.downstate <- wind_sites$site[which(wind_sites$region=="downstate")]
sites <- wind_sites$site
n.sites.west <- length(sites.west)
n.sites.east <- length(sites.east)
n.sites.downstate <- length(sites.downstate)
#now we have the 5 variables and the 3 regions
n.var <- 66 + 5*8760
n.con<- 1+ 3*8760
n.bo <- 66 + 8760
n.sites<-66
n.hrs<-8760
trans.limit.east <- trans$trans.limit.mw[1]
trans.limit.downstate <- trans$trans.limit.mw[2]
turbine.capacities <- c(3, 3000, 6000, 9000, 12000, 15000)
turbine.distribution3<-matrix(list(), nrow=6, ncol=66)
other.gen.total.mwh3<-matrix(list(),nrow=6)
cap.factor.wind3<-matrix(list(),nrow=6)
for (j in 1:length(turbine.capacities)){
wind.cap.total.mw3 <- turbine.capacities[j]
rate.cap.per.mw <- 3
n.t <- wind.cap.total.mw3/rate.cap.per.mw
#develop MILP:
lp.case3 <- make.lp(nrow = n.con, ncol = n.var)
lp.control(lp.case3, sense = 'min')
#set coefficients
set.objfn(lp.case3,obj=c(rep(0,n.sites), rep(1,3*n.hrs),rep(0,2*n.hrs)))
#force number of turbines at each site to be an integer
set.type(lp.case3, c(1:n.sites),type = "integer")
#add constraints by row (rather than by column)
#turn on row entry mode - turn off after adding all constraints
row.add.mode(lp.case3, "on")
add.constraint(lp.case3, xt= rep(1,n.sites), type="=", rhs=n.t, indices=c(1:n.sites))
#energy balance: West
for(i in 1:n.hrs){
add.constraint(lp.case3,xt=c(power_per_site[i,1+sites.west],1,(-1)),type=">=", rhs=demand[i, "west"] - west_power, indices=c(sites.west,(n.sites+i),(n.sites+3*n.hrs+i)))
}
#west.capgen.mw = nonbase
#energy balance: East
for(i in 1:n.hrs){
add.constraint(lp.case3,xt=c(power_per_site[i,1+sites.east],1,1,(-1)),type=">=", rhs=demand[i,"east"] - east_power, indices=c(sites.east,(n.sites+n.hrs+i),(n.sites+3*n.hrs+i),(n.sites+4*n.hrs+i)))
}
#energy balance: Downstate
for(i in 1:n.hrs){
add.constraint(lp.case3,xt=c(power_per_site[i,1+sites.downstate],1,1),type=">=", rhs=demand[i, "downstate"] - downstate_power, indices=c(sites.downstate,(n.sites+2*n.hrs+i),(n.sites+4*n.hrs+i)))
}
#remember to turn off row entry mode
row.add.mode(lp.case3, "off")
#set bounds on decision variables
set.bounds(lp.case3, lower=rep(0,n.var), upper= c(wind_sites$n.t.max,rep(west_cap,n.hrs),rep(east_cap,n.hrs),rep(down_cap,n.hrs),rep(trans.limit.east,n.hrs),rep(trans.limit.downstate,n.hrs)))
#solves optimization problem:
solve(lp.case3)
turbine.distribution3[j,] <- get.variables(lp.case3)[1:n.sites]
other.gen.total.mwh3[j] <- sum(get.variables(lp.case3)[67:26346])
#now input for below
cap.factor.wind3[j] <- (sum(demand$state) - other.gen.total.mwh3[j] -state_power*n.hrs)/(wind.cap.total.mw3*8760)
print(paste("turbine distribution",turbine.distribution3[j]))
print(paste("other.gen.total.mwh.case3",other.gen.total.mwh3[j]))
print(paste("cap.factor.wind.case3.",cap.factor.wind3[j]))
}
other.gen.total.mwh3[j]
3000000-other.gen.total.mwh3[j]
3000000 - as.integer(other.gen.total.mwh3[j])
300000000000 - as.integer(other.gen.total.mwh3[j])
300000000000 + as.integer(other.gen.total.mwh3[j])
#case 3
sites.west <- wind_sites$site[which(wind_sites$region=="west")]
sites.east <- wind_sites$site[which(wind_sites$region=="east")]
sites.downstate <- wind_sites$site[which(wind_sites$region=="downstate")]
sites <- wind_sites$site
n.sites.west <- length(sites.west)
n.sites.east <- length(sites.east)
n.sites.downstate <- length(sites.downstate)
#now we have the 5 variables and the 3 regions
n.var <- 66 + 5*8760
n.con<- 1+ 3*8760
n.bo <- 66 + 8760
n.sites<-66
n.hrs<-8760
trans.limit.east <- trans$trans.limit.mw[1]
trans.limit.downstate <- trans$trans.limit.mw[2]
turbine.capacities <- c(3, 3000, 6000, 9000, 12000, 15000)
turbine.distribution3<-matrix(list(), nrow=6, ncol=66)
other.gen.total.mwh3<-matrix(list(),nrow=6)
cap.factor.wind3<-matrix(list(),nrow=6)
for (j in 1:length(turbine.capacities)){
wind.cap.total.mw3 <- turbine.capacities[j]
rate.cap.per.mw <- 3
n.t <- wind.cap.total.mw3/rate.cap.per.mw
#develop MILP:
lp.case3 <- make.lp(nrow = n.con, ncol = n.var)
lp.control(lp.case3, sense = 'min')
#set coefficients
set.objfn(lp.case3,obj=c(rep(0,n.sites), rep(1,3*n.hrs),rep(0,2*n.hrs)))
#force number of turbines at each site to be an integer
set.type(lp.case3, c(1:n.sites),type = "integer")
#add constraints by row (rather than by column)
#turn on row entry mode - turn off after adding all constraints
row.add.mode(lp.case3, "on")
add.constraint(lp.case3, xt= rep(1,n.sites), type="=", rhs=n.t, indices=c(1:n.sites))
#energy balance: West
for(i in 1:n.hrs){
add.constraint(lp.case3,xt=c(power_per_site[i,1+sites.west],1,(-1)),type=">=", rhs=demand[i, "west"] - west_power, indices=c(sites.west,(n.sites+i),(n.sites+3*n.hrs+i)))
}
#west.capgen.mw = nonbase
#energy balance: East
for(i in 1:n.hrs){
add.constraint(lp.case3,xt=c(power_per_site[i,1+sites.east],1,1,(-1)),type=">=", rhs=demand[i,"east"] - east_power, indices=c(sites.east,(n.sites+n.hrs+i),(n.sites+3*n.hrs+i),(n.sites+4*n.hrs+i)))
}
#energy balance: Downstate
for(i in 1:n.hrs){
add.constraint(lp.case3,xt=c(power_per_site[i,1+sites.downstate],1,1),type=">=", rhs=demand[i, "downstate"] - downstate_power, indices=c(sites.downstate,(n.sites+2*n.hrs+i),(n.sites+4*n.hrs+i)))
}
#remember to turn off row entry mode
row.add.mode(lp.case3, "off")
#set bounds on decision variables
set.bounds(lp.case3, lower=rep(0,n.var), upper= c(wind_sites$n.t.max,rep(west_cap,n.hrs),rep(east_cap,n.hrs),rep(down_cap,n.hrs),rep(trans.limit.east,n.hrs),rep(trans.limit.downstate,n.hrs)))
#solves optimization problem:
solve(lp.case3)
turbine.distribution3[j,] <- get.variables(lp.case3)[1:n.sites]
other.gen.total.mwh3[j] <- sum(get.variables(lp.case3)[67:26346])
#now input for below
cap.factor.wind3[j] <- (sum(demand$state) - as.interger(other.gen.total.mwh3[j]) -state_power*n.hrs)/(wind.cap.total.mw3*8760)
print(paste("turbine distribution",turbine.distribution3[j]))
print(paste("other.gen.total.mwh.case3",other.gen.total.mwh3[j]))
print(paste("cap.factor.wind.case3.",cap.factor.wind3[j]))
}
#case 3
sites.west <- wind_sites$site[which(wind_sites$region=="west")]
sites.east <- wind_sites$site[which(wind_sites$region=="east")]
sites.downstate <- wind_sites$site[which(wind_sites$region=="downstate")]
sites <- wind_sites$site
n.sites.west <- length(sites.west)
n.sites.east <- length(sites.east)
n.sites.downstate <- length(sites.downstate)
#now we have the 5 variables and the 3 regions
n.var <- 66 + 5*8760
n.con<- 1+ 3*8760
n.bo <- 66 + 8760
n.sites<-66
n.hrs<-8760
trans.limit.east <- trans$trans.limit.mw[1]
trans.limit.downstate <- trans$trans.limit.mw[2]
turbine.capacities <- c(3, 3000, 6000, 9000, 12000, 15000)
turbine.distribution3<-matrix(list(), nrow=6, ncol=66)
other.gen.total.mwh3<-matrix(list(),nrow=6)
cap.factor.wind3<-matrix(list(),nrow=6)
for (j in 1:length(turbine.capacities)){
wind.cap.total.mw3 <- turbine.capacities[j]
rate.cap.per.mw <- 3
n.t <- wind.cap.total.mw3/rate.cap.per.mw
#develop MILP:
lp.case3 <- make.lp(nrow = n.con, ncol = n.var)
lp.control(lp.case3, sense = 'min')
#set coefficients
set.objfn(lp.case3,obj=c(rep(0,n.sites), rep(1,3*n.hrs),rep(0,2*n.hrs)))
#force number of turbines at each site to be an integer
set.type(lp.case3, c(1:n.sites),type = "integer")
#add constraints by row (rather than by column)
#turn on row entry mode - turn off after adding all constraints
row.add.mode(lp.case3, "on")
add.constraint(lp.case3, xt= rep(1,n.sites), type="=", rhs=n.t, indices=c(1:n.sites))
#energy balance: West
for(i in 1:n.hrs){
add.constraint(lp.case3,xt=c(power_per_site[i,1+sites.west],1,(-1)),type=">=", rhs=demand[i, "west"] - west_power, indices=c(sites.west,(n.sites+i),(n.sites+3*n.hrs+i)))
}
#west.capgen.mw = nonbase
#energy balance: East
for(i in 1:n.hrs){
add.constraint(lp.case3,xt=c(power_per_site[i,1+sites.east],1,1,(-1)),type=">=", rhs=demand[i,"east"] - east_power, indices=c(sites.east,(n.sites+n.hrs+i),(n.sites+3*n.hrs+i),(n.sites+4*n.hrs+i)))
}
#energy balance: Downstate
for(i in 1:n.hrs){
add.constraint(lp.case3,xt=c(power_per_site[i,1+sites.downstate],1,1),type=">=", rhs=demand[i, "downstate"] - downstate_power, indices=c(sites.downstate,(n.sites+2*n.hrs+i),(n.sites+4*n.hrs+i)))
}
#remember to turn off row entry mode
row.add.mode(lp.case3, "off")
#set bounds on decision variables
set.bounds(lp.case3, lower=rep(0,n.var), upper= c(wind_sites$n.t.max,rep(west_cap,n.hrs),rep(east_cap,n.hrs),rep(down_cap,n.hrs),rep(trans.limit.east,n.hrs),rep(trans.limit.downstate,n.hrs)))
#solves optimization problem:
solve(lp.case3)
turbine.distribution3[j,] <- get.variables(lp.case3)[1:n.sites]
other.gen.total.mwh3[j] <- sum(get.variables(lp.case3)[67:26346])
#now input for below
cap.factor.wind3[j] <- (sum(demand$state) - as.integer(other.gen.total.mwh3[j]) -state_power*n.hrs)/(wind.cap.total.mw3*8760)
print(paste("turbine distribution",turbine.distribution3[j]))
print(paste("other.gen.total.mwh.case3",other.gen.total.mwh3[j]))
print(paste("cap.factor.wind.case3.",cap.factor.wind3[j]))
}
